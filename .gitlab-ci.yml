# GPU Scheduler GitLab CI/CD Pipeline
# 
# This pipeline includes:
# - Code syntax validation and unit tests
# - Docker image building (when registry is available)
# - Static security analysis (bandit, safety)
# - Helm chart validation and linting
# - Optional deployment stages
#
# Note: Container scanning is disabled to avoid Docker-in-Docker issues

stages:
  - test
  - build
  - security
  - helm-lint
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  SCHEDULER_IMAGE: $CI_REGISTRY_IMAGE/gpu-scheduler
  CHECK_IMAGE: $CI_REGISTRY_IMAGE/gpu-scheduler-check

# Test Stage
test-scheduler:
  stage: test
  image: python:3.11-slim
  before_script:
    - cd gpu-scheduler
    - pip install -r requirements.txt
    - pip install pytest  # For JUnit XML generation
  script:
    - python -m py_compile scheduler.py health_server.py webhook_server.py
    - python test_basic.py
    # Generate JUnit XML format for GitLab integration
    - pytest test_basic.py --junitxml=test-results.xml --tb=short -v || echo "Basic tests completed"
  artifacts:
    reports:
      junit: gpu-scheduler/test-results.xml
    paths:
      - gpu-scheduler/test-results.xml
    expire_in: 1 week
    when: always
  rules:
    - changes:
        - gpu-scheduler/**/*

test-check-service:
  stage: test
  image: python:3.11-slim
  script:
    - cd gpu-scheduler-check
    - python -m py_compile main.py
    - python -c "import main; print('✓ Syntax check passed')"
  rules:
    - changes:
        - gpu-scheduler-check/**/*

# Build Stage
build-scheduler:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd gpu-scheduler
    - docker build -t $SCHEDULER_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $SCHEDULER_IMAGE:latest .
    - docker push $SCHEDULER_IMAGE:$CI_COMMIT_SHA
    - docker push $SCHEDULER_IMAGE:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - gpu-scheduler/**/*
    - if: $CI_COMMIT_TAG

build-check-service:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd gpu-scheduler-check
    - docker build -t $CHECK_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CHECK_IMAGE:latest .
    - docker push $CHECK_IMAGE:$CI_COMMIT_SHA
    - docker push $CHECK_IMAGE:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - gpu-scheduler-check/**/*
        - gpu-scheduler/**/*
    - if: $CI_COMMIT_TAG

# Security Stage - Static Analysis
security-scan:
  stage: security
  image: python:3.11-slim
  script:
    - pip install bandit safety
    - echo "Running security scans on source code..."
    - bandit -r gpu-scheduler/ -f json -o bandit-report.json || true
    - safety check --output json > safety-report.json || true
    - echo "Security scans completed"
  artifacts:
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  allow_failure: true

# Note: Container scanning removed to avoid Docker-in-Docker issues
# Security is handled via static analysis above

# Helm Validation Stage
helm-validate:
  stage: helm-lint
  image: alpine/helm:latest
  before_script:
    - set -e
    - helm version
    - echo "Validating helm charts..."
  script:
    - helm lint charts/gpu-scheduler
    - helm lint charts/gpu-scheduler-check
    - helm template gpu-scheduler charts/gpu-scheduler --dry-run
    - helm template gpu-scheduler-check charts/gpu-scheduler-check --dry-run
  artifacts:
    paths:
      - charts/*/templates/*.yaml
    expire_in: 1 day
  rules:
    - changes:
        - charts/**/*

# ArgoCD Validation - Simple YAML check
argocd-validate:
  stage: helm-lint
  image: alpine:latest
  script:
    - apk add --no-cache yq
    - echo "Validating ArgoCD YAML files..."
    - yq eval . argocd/gpu-scheduler-project.yaml > /dev/null
    - yq eval . argocd/gpu-scheduler-complete-applicationset.yaml > /dev/null
    - echo "✓ ArgoCD YAML files are valid"
  rules:
    - changes:
        - argocd/**/*

# Deploy Staging
deploy-staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging.gpu-scheduler.example.com
  script:
    - kubectl config use-context $STAGING_CONTEXT
    - kubectl apply -f argocd/gpu-scheduler-project.yaml
    - kubectl apply -f argocd/gpu-scheduler-complete-applicationset.yaml
    - kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=gpu-scheduler -n gpu-scheduler-system --timeout=300s
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

# Deploy Production
deploy-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://gpu-scheduler.example.com
  script:
    - kubectl config use-context $PRODUCTION_CONTEXT
    - kubectl apply -f argocd/gpu-scheduler-project.yaml
    - kubectl apply -f argocd/gpu-scheduler-complete-applicationset.yaml
    - kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=gpu-scheduler -n gpu-scheduler-system --timeout=300s
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Release Job
create-release:
  stage: deploy-production
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'GPU Scheduler release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'GPU Scheduler Chart'
          url: '$CI_PROJECT_URL/-/packages'
        - name: 'Documentation'
          url: '$CI_PROJECT_URL/-/blob/$CI_COMMIT_TAG/README.md'
  rules:
    - if: $CI_COMMIT_TAG

# Cleanup
cleanup-old-images:
  stage: deploy-production
  image: alpine:latest
  script:
    - echo "Cleaning up old container images"
    # Add cleanup logic here
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"